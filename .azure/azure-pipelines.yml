# Azure DevOps Pipeline para NestJS + Google Cloud Run
# Autor: Pipeline automatizado para deploy cont√≠nuo

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - README.md
      - docs/*
      - monitoring/*

# Vari√°veis globais do pipeline
variables:
  # Configura√ß√µes do projeto
  nodeVersion: '22.x'
  buildConfiguration: 'production'
  
  # Google Cloud Platform
  gcpProjectId: '$(GCP_PROJECT_ID)'
  gcpRegion: '$(GCP_REGION)'
  cloudRunService: '$(CLOUD_RUN_SERVICE)'
  
  # Container Registry
  containerRegistry: 'gcr.io'
  imageName: '$(containerRegistry)/$(gcpProjectId)/nestjs-app'
  imageTag: '$(Build.BuildId)'
  
  # Paths
  workingDirectory: '$(System.DefaultWorkingDirectory)'

# Pool de agentes
pool:
  vmImage: 'ubuntu-latest'

# Stages do pipeline
stages:
  # ===== STAGE 1: BUILD & TEST =====
  - stage: BuildAndTest
    displayName: 'Build and Test Application'
    jobs:
      - job: BuildTest
        displayName: 'Build, Lint and Test'
        steps:
          # Checkout do c√≥digo
          - checkout: self
            displayName: 'Checkout Repository'
            fetchDepth: 1

          # Setup Node.js
          - task: NodeTool@0
            displayName: 'Setup Node.js $(nodeVersion)'
            inputs:
              versionSpec: '$(nodeVersion)'

          # Cache das depend√™ncias npm
          - task: Cache@2
            displayName: 'Cache npm dependencies'
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
                npm
              path: '$(npm_config_cache)'

          # Instalar depend√™ncias
          - script: |
              npm ci
            displayName: 'Install Dependencies'
            workingDirectory: '$(workingDirectory)'

          # Lint do c√≥digo
          - script: |
              npm run lint
            displayName: 'Run ESLint'
            workingDirectory: '$(workingDirectory)'

          # Build da aplica√ß√£o
          - script: |
              npm run build
            displayName: 'Build Application'
            workingDirectory: '$(workingDirectory)'

          # Executar testes unit√°rios
          - script: |
              npm run test -- --coverage --watchAll=false
            displayName: 'Run Unit Tests'
            workingDirectory: '$(workingDirectory)'

          # Executar testes E2E
          - script: |
              npm run test:e2e
            displayName: 'Run E2E Tests'
            workingDirectory: '$(workingDirectory)'

          # Publicar resultados dos testes
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/test-results.xml'
              failTaskOnFailedTests: true

          # Publicar cobertura de c√≥digo
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '**/coverage/cobertura-coverage.xml'
              reportDirectory: '**/coverage'

          # Publicar artefatos do build
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Build Artifacts'
            inputs:
              pathToPublish: '$(workingDirectory)/dist'
              artifactName: 'nestjs-build'
              publishLocation: 'Container'

  # ===== STAGE 2: DOCKER BUILD =====
  - stage: DockerBuild
    displayName: 'Build Docker Image'
    dependsOn: BuildAndTest
    condition: succeeded()
    jobs:
      - job: BuildImage
        displayName: 'Build and Push Docker Image'
        steps:
          # Checkout do c√≥digo
          - checkout: self
            displayName: 'Checkout Repository'

          # Autentica√ß√£o com Google Cloud
          - task: GoogleCloudSdkTool@0
            displayName: 'Setup Google Cloud SDK'
            inputs:
              version: 'latest'

          # Configurar autentica√ß√£o GCP
          - script: |
              echo '$(GCP_SERVICE_ACCOUNT_KEY)' | base64 -d > gcp-key.json
              gcloud auth activate-service-account --key-file gcp-key.json
              gcloud config set project $(gcpProjectId)
              gcloud auth configure-docker
            displayName: 'Authenticate with GCP'

          # Build da imagem Docker
          - script: |
              docker build -t $(imageName):$(imageTag) -t $(imageName):latest .
            displayName: 'Build Docker Image'
            workingDirectory: '$(workingDirectory)'

          # Scan de seguran√ßa da imagem (opcional)
          - script: |
              docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                -v $(pwd):/tmp/.cache/ aquasec/trivy:latest image \
                --exit-code 0 --severity HIGH,CRITICAL \
                --format table $(imageName):$(imageTag)
            displayName: 'Security Scan (Trivy)'
            continueOnError: true

          # Push da imagem para GCR
          - script: |
              docker push $(imageName):$(imageTag)
              docker push $(imageName):latest
            displayName: 'Push Docker Image to GCR'

          # Limpeza
          - script: |
              rm -f gcp-key.json
              docker system prune -f
            displayName: 'Cleanup'

  # ===== STAGE 3: DEPLOY TO CLOUD RUN =====
  - stage: DeployProduction
    displayName: 'Deploy to Google Cloud Run'
    dependsOn: DockerBuild
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployCloudRun
        displayName: 'Deploy to Cloud Run'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                # Setup Google Cloud SDK
                - task: GoogleCloudSdkTool@0
                  displayName: 'Setup Google Cloud SDK'
                  inputs:
                    version: 'latest'

                # Autentica√ß√£o com GCP
                - script: |
                    echo '$(GCP_SERVICE_ACCOUNT_KEY)' | base64 -d > gcp-key.json
                    gcloud auth activate-service-account --key-file gcp-key.json
                    gcloud config set project $(gcpProjectId)
                  displayName: 'Authenticate with GCP'

                # Deploy no Cloud Run
                - script: |
                    gcloud run deploy $(cloudRunService) \
                      --image $(imageName):$(imageTag) \
                      --region $(gcpRegion) \
                      --platform managed \
                      --allow-unauthenticated \
                      --port 8080 \
                      --memory 512Mi \
                      --cpu 1 \
                      --min-instances 0 \
                      --max-instances 10 \
                      --timeout 300 \
                      --concurrency 80 \
                      --set-env-vars NODE_ENV=production \
                      --set-env-vars PORT=8080 \
                      --set-env-vars DATABASE_URL="$(DATABASE_URL)" \
                      --labels app=nestjs-app,version=$(imageTag),environment=production
                  displayName: 'Deploy to Cloud Run'

                # Verificar sa√∫de do servi√ßo
                - script: |
                    SERVICE_URL=$(gcloud run services describe $(cloudRunService) \
                      --region $(gcpRegion) \
                      --format 'value(status.url)')
                    
                    echo "Service URL: $SERVICE_URL"
                    
                    # Aguardar o servi√ßo ficar dispon√≠vel
                    for i in {1..30}; do
                      if curl -f -s "$SERVICE_URL/" > /dev/null; then
                        echo "‚úÖ Service is healthy!"
                        echo "##vso[task.setvariable variable=SERVICE_URL;isOutput=true]$SERVICE_URL"
                        break
                      fi
                      echo "‚è≥ Waiting for service to be ready... ($i/30)"
                      sleep 10
                    done
                  displayName: 'Health Check'
                  name: 'healthCheck'

                # Limpeza
                - script: |
                    rm -f gcp-key.json
                  displayName: 'Cleanup'

  # ===== STAGE 4: POST-DEPLOYMENT =====
  - stage: PostDeployment
    displayName: 'Post-Deployment Tasks'
    dependsOn: DeployProduction
    condition: succeeded()
    jobs:
      - job: PostDeploy
        displayName: 'Post-Deployment Verification'
        steps:
          # Notifica√ß√£o de sucesso
          - script: |
              echo "üéâ Deployment completed successfully!"
              echo "üìä Build ID: $(Build.BuildId)"
              echo "üè∑Ô∏è  Image Tag: $(imageTag)"
              echo "üåê Service URL: $(healthCheck.SERVICE_URL)"
            displayName: 'Deployment Summary'

          # Opcional: Executar testes de smoke
          - script: |
              SERVICE_URL="$(healthCheck.SERVICE_URL)"
              if [ ! -z "$SERVICE_URL" ]; then
                echo "Running smoke tests against: $SERVICE_URL"
                
                # Test health endpoint
                curl -f "$SERVICE_URL/" || exit 1
                
                # Test API documentation
                curl -f "$SERVICE_URL/api" || exit 1
                
                # Test metrics endpoint
                curl -f "$SERVICE_URL/metrics" || exit 1
                
                echo "‚úÖ All smoke tests passed!"
              fi
            displayName: 'Smoke Tests'
            continueOnError: true